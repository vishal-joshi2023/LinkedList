/*
 get item -> if HIT :
                     -> delete Node from map & doublylist
                     -> insert Node again into list after headNode 
                     -> and insert node in map with new address
             if Fault : return -1;

 put item -> *if page not full :
             -> insert Node into DLlist right after headNode                     
             -> and insert node in map with  address
             *if page full :
             -> delete node right befor tailNode
             -> also from map
             -> follow page not full
             *if already present -> follow get item
 add / delete node fun          
*/

class LRUCache {
  class Node{
    public:  
      int data;
      int key;
      Node *next = NULL;
      Node *pre  = NULL;
        
      Node(int _key,int _data){
        key = _key;
        data = _data;
      }
  };

int cap;
Node *head = new Node(-1,-1);
Node *tail = new Node(-1,-1);
unordered_map<int, Node* > map;

void insertNode(Node *newNode){
   newNode->next = head->next;
   newNode->pre  = head;
   head->next->pre = newNode;
   head->next = newNode;
}

void deleteNode(Node *node){
   
   node->pre->next = node->next;
   node->next->pre = node->pre;
}

public:
    LRUCache(int capacity) {
     
     cap = capacity;

     head->next = tail;
     tail->pre = head;   
    }
    
    int get(int key) {
      // if already exists
      if(map.find(key)!=map.end()){

        Node* node = map[key]; 
        int val = node->data;

        // remove old connection
        map.erase(key); // from map
        deleteNode(node);  //from link
        
        // make new connection
        insertNode(node); //into link again
        map[key] = head->next;  // into map

        // page hit return data
        return val;
      }   

      return -1; // page fault       
    }
    
    void put(int key, int value) {
        
        // if already exist
        if(map.find(key)!=map.end()){
           
           Node* node = map[key]; 

           // remove old connection
           map.erase(key); // from map
           deleteNode(node);  //from link
        }
        
        // if not check size if full remove LRU 
        if(map.size()==cap){
          // remove LRU
          map.erase(tail->pre->key);  // from map
          deleteNode(tail->pre);      // from link
        } 
        
        // insert newNode
        insertNode(new Node(key,value)); 
        map[key] = head->next;
    }
};
