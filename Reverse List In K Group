Node* kReverse(Node* head, int k) {
    Node* current = head;
    int count = 0;

    // Check if there are at least k nodes remaining
    while (current != nullptr && count < k) {
        current = current->next;
        count++;
    }

    // If there are at least k nodes, reverse them
    if (count == k) {
        current = kReverse(current, k);

        // Reverse the current group of k nodes
        while (count > 0) {
          Node *temp = head->next;
          head->next = current;
          current = head;
          head = temp;
          count--;
        }
        head = current; // Update head to the new group after reversal
     }

    return head;
}

***********
// optimize

 void reverse(ListNode* s , ListNode* e){
      ListNode *pre = NULL;
      ListNode *curr = s;

      while(pre!=e){
        ListNode *next = curr->next;
        curr->next = pre;
        pre = curr;
        curr = next;
      }
    }
    ListNode* reverseKGroup(ListNode* head, int k) {
        
        if(k==0||k==1||!head) return head;

        //if we reverse list then the pre & nxt part lost so 
        //keep track of both ptrs

        ListNode* dummy = new ListNode(-1);

        dummy->next = head;
        ListNode* e = head;
        ListNode* beforeStart = dummy;
        int i=0;
        
        while(e){

          i++;
          if(i%k==0){
            
            //reserve ptrs
            ListNode *s = beforeStart->next;
            ListNode *last = e->next;
            // reverse
            reverse(s,e);

            //connection
             beforeStart->next = e;
             s->next = last;

             e = last;        // end
             beforeStart = s; // new startPreV/ next start 
          }
          else{
            e = e->next;
          }
        } 

        return dummy->next; 
    }
